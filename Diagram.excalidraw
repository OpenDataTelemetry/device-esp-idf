{
  "type": "excalidraw",
  "version": 2,
  "source": "https://marketplace.visualstudio.com/items?itemName=pomdtr.excalidraw-editor",
  "elements": [
    {
      "id": "cy70iUXMdSCIpzKZCrirw",
      "type": "rectangle",
      "x": -1010.2929199953472,
      "y": 17.644367662267058,
      "width": 1098.2522095605914,
      "height": 322,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "seed": 1950717536,
      "version": 784,
      "versionNonce": 2000088672,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "A7PZX7uEGhN39fZ6pGBLb"
        }
      ],
      "updated": 1721262337853,
      "link": null,
      "locked": false
    },
    {
      "id": "A7PZX7uEGhN39fZ6pGBLb",
      "type": "text",
      "x": -1005.2929199953472,
      "y": 22.644367662267058,
      "width": 1078.125,
      "height": 312,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "seed": 1583034976,
      "version": 1308,
      "versionNonce": 109883296,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1721262401736,
      "link": null,
      "locked": false,
      "text": " esp_mqtt_client_config_t mqtt_cfg = {\n        .uri = CONFIG_BROKER_URL,\n        .username = \"public\",\n        .password = \"public\",\n    };\n // The type of client is a pointer to esp_mqtt_client and receives the return of \n // esp_mqtt_client_init. This value is a client variable with type esp_mqtt_client_handle_t\n esp_mqtt_client_handle_t client = esp_mqtt_client_init(&mqtt_cfg);\n\n // client is an address to a esp_mqtt_client struct \n esp_mqtt_client_register_event(client, ESP_EVENT_ANY_ID, mqtt_event_handler, NULL);\n esp_mqtt_client_start(client);\n",
      "fontSize": 20,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "middle",
      "baseline": 307,
      "containerId": "cy70iUXMdSCIpzKZCrirw",
      "originalText": " esp_mqtt_client_config_t mqtt_cfg = {\n        .uri = CONFIG_BROKER_URL,\n        .username = \"public\",\n        .password = \"public\",\n    };\n // The type of client is a pointer to esp_mqtt_client and receives the return of \n // esp_mqtt_client_init. This value is a client variable with type esp_mqtt_client_handle_t   \n esp_mqtt_client_handle_t client = esp_mqtt_client_init(&mqtt_cfg);\n\n // client is an address to a esp_mqtt_client struct \n esp_mqtt_client_register_event(client, ESP_EVENT_ANY_ID, mqtt_event_handler, NULL);\n esp_mqtt_client_start(client);\n",
      "lineHeight": 1.2
    },
    {
      "id": "jS5POT1MRfX81xKbEMfPn",
      "type": "rectangle",
      "x": -149.5158863915966,
      "y": 484.5220867406671,
      "width": 3676.9114565889786,
      "height": 1013.9375,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "seed": 2123123616,
      "version": 969,
      "versionNonce": 525287328,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "sE-muqzJtSgt5P1avfnEN"
        }
      ],
      "updated": 1721261865748,
      "link": null,
      "locked": false
    },
    {
      "id": "sE-muqzJtSgt5P1avfnEN",
      "type": "text",
      "x": -144.5158863915966,
      "y": 511.4908367406671,
      "width": 3534.375,
      "height": 960,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "seed": 644356000,
      "version": 2132,
      "versionNonce": 805177952,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1721261865748,
      "link": null,
      "locked": false,
      "text": "typedef struct {\n    mqtt_event_callback_t event_handle;     /*!< handle for MQTT events as a callback in legacy mode */\n    esp_event_loop_handle_t event_loop_handle; /*!< handle for MQTT event loop library */\n    const char *host;                       /*!< MQTT server domain (ipv4 as string) */\n    const char *uri;                        /*!< Complete MQTT broker URI */\n    uint32_t port;                          /*!< MQTT server port */\n    bool set_null_client_id;                /*!< Selects a NULL client id */\n    const char *client_id;                  /*!< Set client id.\n                                                 Ignored if set_null_client_id == true\n                                                 If NULL set the default client id.\n                                                 Default client id is ``ESP32_%CHIPID%`` where %CHIPID% are last 3 bytes of MAC address in hex format */\n    const char *username;                   /*!< MQTT username */\n    const char *password;                   /*!< MQTT password */\n    const char *lwt_topic;                  /*!< LWT (Last Will and Testament) message topic (NULL by default) */\n    const char *lwt_msg;                    /*!< LWT message (NULL by default) */\n    int lwt_qos;                            /*!< LWT message qos */\n    int lwt_retain;                         /*!< LWT retained message flag */\n    int lwt_msg_len;                        /*!< LWT message length */\n    int disable_clean_session;              /*!< mqtt clean session, default clean_session is true */\n    int keepalive;                          /*!< mqtt keepalive, default is 120 seconds */\n    bool disable_auto_reconnect;            /*!< this mqtt client will reconnect to server (when errors/disconnect). Set disable_auto_reconnect=true to disable */\n    void *user_context;                     /*!< pass user context to this option, then can receive that context in ``event->user_context`` */\n    int task_prio;                          /*!< MQTT task priority, default is 5, can be changed in ``make menuconfig`` */\n    int task_stack;                         /*!< MQTT task stack size, default is 6144 bytes, can be changed in ``make menuconfig`` */\n    int buffer_size;                        /*!< size of MQTT send/receive buffer, default is 1024 (only receive buffer size if ``out_buffer_size`` defined) */\n    const char *cert_pem;                   /*!< Pointer to certificate data in PEM or DER format for server verify (with SSL), default is NULL, not required to verify the server. PEM-format must have a terminating NULL-character. DER-format requires the length to be passed in cert_len. */\n    size_t cert_len;                        /*!< Length of the buffer pointed to by cert_pem. May be 0 for null-terminated pem */\n    const char *client_cert_pem;            /*!< Pointer to certificate data in PEM or DER format for SSL mutual authentication, default is NULL, not required if mutual authentication is not needed. If it is not NULL, also `client_key_pem` has to be provided. PEM-format must have a terminating NULL-character. DER-format requires the length to be passed in client_cert_len. */\n    size_t client_cert_len;                 /*!< Length of the buffer pointed to by client_cert_pem. May be 0 for null-terminated pem */\n    const char *client_key_pem;             /*!< Pointer to private key data in PEM or DER format for SSL mutual authentication, default is NULL, not required if mutual authentication is not needed. If it is not NULL, also `client_cert_pem` has to be provided. PEM-format must have a terminating NULL-character. DER-format requires the length to be passed in client_key_len */\n    size_t client_key_len;                  /*!< Length of the buffer pointed to by client_key_pem. May be 0 for null-terminated pem */\n    esp_mqtt_transport_t transport;         /*!< overrides URI transport */\n    int refresh_connection_after_ms;        /*!< Refresh connection after this value (in milliseconds) */\n    const struct psk_key_hint *psk_hint_key;     /*!< Pointer to PSK struct defined in esp_tls.h to enable PSK authentication (as alternative to certificate verification). If not NULL and server/client certificates are NULL, PSK is enabled */\n    bool          use_global_ca_store;      /*!< Use a global ca_store for all the connections in which this bool is set. */\n    esp_err_t (*crt_bundle_attach)(void *conf); /*!< Pointer to ESP x509 Certificate Bundle attach function for the usage of certification bundles in mqtts */\n    int reconnect_timeout_ms;               /*!< Reconnect to the broker after this value in miliseconds if auto reconnect is not disabled (defaults to 10s) */\n    const char **alpn_protos;               /*!< NULL-terminated list of supported application protocols to be used for ALPN */\n    const char *clientkey_password;         /*!< Client key decryption password string */\n    int clientkey_password_len;             /*!< String length of the password pointed to by clientkey_password */\n    esp_mqtt_protocol_ver_t protocol_ver;   /*!< MQTT protocol version used for connection, defaults to value from menuconfig*/\n    int out_buffer_size;                    /*!< size of MQTT output buffer. If not defined, both output and input buffers have the same size defined as ``buffer_size`` */\n    bool skip_cert_common_name_check;       /*!< Skip any validation of server certificate CN field, this reduces the security of TLS and makes the mqtt client susceptible to MITM attacks  */\n    bool use_secure_element;                /*!< enable secure element for enabling SSL connection */\n    void *ds_data;                          /*!< carrier of handle for digital signature parameters */\n    int network_timeout_ms;                 /*!< Abort network operation if it is not completed after this value, in milliseconds (defaults to 10s) */\n    bool disable_keepalive;                 /*!< Set disable_keepalive=true to turn off keep-alive mechanism, false by default (keepalive is active by default). Note: setting the config value `keepalive` to `0` doesn't disable keepalive feature, but uses a default keepalive period */\n    const char *path;                       /*!< Path in the URI*/\n    int message_retransmit_timeout;         /*!< timeout for retansmit of failded packet */\n} esp_mqtt_client_config_t;",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "middle",
      "baseline": 956,
      "containerId": "jS5POT1MRfX81xKbEMfPn",
      "originalText": "typedef struct {\n    mqtt_event_callback_t event_handle;     /*!< handle for MQTT events as a callback in legacy mode */\n    esp_event_loop_handle_t event_loop_handle; /*!< handle for MQTT event loop library */\n    const char *host;                       /*!< MQTT server domain (ipv4 as string) */\n    const char *uri;                        /*!< Complete MQTT broker URI */\n    uint32_t port;                          /*!< MQTT server port */\n    bool set_null_client_id;                /*!< Selects a NULL client id */\n    const char *client_id;                  /*!< Set client id.\n                                                 Ignored if set_null_client_id == true\n                                                 If NULL set the default client id.\n                                                 Default client id is ``ESP32_%CHIPID%`` where %CHIPID% are last 3 bytes of MAC address in hex format */\n    const char *username;                   /*!< MQTT username */\n    const char *password;                   /*!< MQTT password */\n    const char *lwt_topic;                  /*!< LWT (Last Will and Testament) message topic (NULL by default) */\n    const char *lwt_msg;                    /*!< LWT message (NULL by default) */\n    int lwt_qos;                            /*!< LWT message qos */\n    int lwt_retain;                         /*!< LWT retained message flag */\n    int lwt_msg_len;                        /*!< LWT message length */\n    int disable_clean_session;              /*!< mqtt clean session, default clean_session is true */\n    int keepalive;                          /*!< mqtt keepalive, default is 120 seconds */\n    bool disable_auto_reconnect;            /*!< this mqtt client will reconnect to server (when errors/disconnect). Set disable_auto_reconnect=true to disable */\n    void *user_context;                     /*!< pass user context to this option, then can receive that context in ``event->user_context`` */\n    int task_prio;                          /*!< MQTT task priority, default is 5, can be changed in ``make menuconfig`` */\n    int task_stack;                         /*!< MQTT task stack size, default is 6144 bytes, can be changed in ``make menuconfig`` */\n    int buffer_size;                        /*!< size of MQTT send/receive buffer, default is 1024 (only receive buffer size if ``out_buffer_size`` defined) */\n    const char *cert_pem;                   /*!< Pointer to certificate data in PEM or DER format for server verify (with SSL), default is NULL, not required to verify the server. PEM-format must have a terminating NULL-character. DER-format requires the length to be passed in cert_len. */\n    size_t cert_len;                        /*!< Length of the buffer pointed to by cert_pem. May be 0 for null-terminated pem */\n    const char *client_cert_pem;            /*!< Pointer to certificate data in PEM or DER format for SSL mutual authentication, default is NULL, not required if mutual authentication is not needed. If it is not NULL, also `client_key_pem` has to be provided. PEM-format must have a terminating NULL-character. DER-format requires the length to be passed in client_cert_len. */\n    size_t client_cert_len;                 /*!< Length of the buffer pointed to by client_cert_pem. May be 0 for null-terminated pem */\n    const char *client_key_pem;             /*!< Pointer to private key data in PEM or DER format for SSL mutual authentication, default is NULL, not required if mutual authentication is not needed. If it is not NULL, also `client_cert_pem` has to be provided. PEM-format must have a terminating NULL-character. DER-format requires the length to be passed in client_key_len */\n    size_t client_key_len;                  /*!< Length of the buffer pointed to by client_key_pem. May be 0 for null-terminated pem */\n    esp_mqtt_transport_t transport;         /*!< overrides URI transport */\n    int refresh_connection_after_ms;        /*!< Refresh connection after this value (in milliseconds) */\n    const struct psk_key_hint *psk_hint_key;     /*!< Pointer to PSK struct defined in esp_tls.h to enable PSK authentication (as alternative to certificate verification). If not NULL and server/client certificates are NULL, PSK is enabled */\n    bool          use_global_ca_store;      /*!< Use a global ca_store for all the connections in which this bool is set. */\n    esp_err_t (*crt_bundle_attach)(void *conf); /*!< Pointer to ESP x509 Certificate Bundle attach function for the usage of certification bundles in mqtts */\n    int reconnect_timeout_ms;               /*!< Reconnect to the broker after this value in miliseconds if auto reconnect is not disabled (defaults to 10s) */\n    const char **alpn_protos;               /*!< NULL-terminated list of supported application protocols to be used for ALPN */\n    const char *clientkey_password;         /*!< Client key decryption password string */\n    int clientkey_password_len;             /*!< String length of the password pointed to by clientkey_password */\n    esp_mqtt_protocol_ver_t protocol_ver;   /*!< MQTT protocol version used for connection, defaults to value from menuconfig*/\n    int out_buffer_size;                    /*!< size of MQTT output buffer. If not defined, both output and input buffers have the same size defined as ``buffer_size`` */\n    bool skip_cert_common_name_check;       /*!< Skip any validation of server certificate CN field, this reduces the security of TLS and makes the mqtt client susceptible to MITM attacks  */\n    bool use_secure_element;                /*!< enable secure element for enabling SSL connection */\n    void *ds_data;                          /*!< carrier of handle for digital signature parameters */\n    int network_timeout_ms;                 /*!< Abort network operation if it is not completed after this value, in milliseconds (defaults to 10s) */\n    bool disable_keepalive;                 /*!< Set disable_keepalive=true to turn off keep-alive mechanism, false by default (keepalive is active by default). Note: setting the config value `keepalive` to `0` doesn't disable keepalive feature, but uses a default keepalive period */\n    const char *path;                       /*!< Path in the URI*/\n    int message_retransmit_timeout;         /*!< timeout for retansmit of failded packet */\n} esp_mqtt_client_config_t;",
      "lineHeight": 1.2
    },
    {
      "id": "SNH9pjfAMAyzr4W6vvThe",
      "type": "rectangle",
      "x": -1001.2673882778057,
      "y": 377.7809402800371,
      "width": 556.1150905064173,
      "height": 29.2,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "seed": 1127679584,
      "version": 835,
      "versionNonce": 565710752,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "RCXfycfZKAg6kecUqYiL6"
        }
      ],
      "updated": 1721262340875,
      "link": null,
      "locked": false
    },
    {
      "id": "RCXfycfZKAg6kecUqYiL6",
      "type": "text",
      "x": -996.2673882778057,
      "y": 382.7809402800371,
      "width": 534.375,
      "height": 19.2,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "seed": 644466592,
      "version": 739,
      "versionNonce": 995433376,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1721262340875,
      "link": null,
      "locked": false,
      "text": "typedef struct esp_mqtt_client *esp_mqtt_client_handle_t;",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "middle",
      "baseline": 15,
      "containerId": "SNH9pjfAMAyzr4W6vvThe",
      "originalText": "typedef struct esp_mqtt_client *esp_mqtt_client_handle_t;",
      "lineHeight": 1.2
    },
    {
      "id": "4hjyTjKQktnFlGbZUt9gj",
      "type": "rectangle",
      "x": -1008.090614832127,
      "y": 455.1724827208961,
      "width": 459.9469866071429,
      "height": 409.83892822265636,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "seed": 1987453856,
      "version": 362,
      "versionNonce": 2069891680,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "yspNgXbYexMh1qgYkq_ga"
        }
      ],
      "updated": 1721261974824,
      "link": null,
      "locked": false
    },
    {
      "id": "yspNgXbYexMh1qgYkq_ga",
      "type": "text",
      "x": -1003.090614832127,
      "y": 468.09194683222427,
      "width": 440.625,
      "height": 384,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "seed": 564481952,
      "version": 198,
      "versionNonce": 2075115104,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1721261974824,
      "link": null,
      "locked": false,
      "text": "struct esp_mqtt_client {\n    esp_transport_list_handle_t transport_list;\n    esp_transport_handle_t transport;\n    mqtt_config_storage_t *config;\n    mqtt_state_t  mqtt_state;\n    mqtt_connect_info_t connect_info;\n    mqtt_client_state_t state;\n    uint64_t refresh_connection_tick;\n    uint64_t keepalive_tick;\n    uint64_t reconnect_tick;\n    int wait_timeout_ms;\n    int auto_reconnect;\n    esp_mqtt_event_t event;\n    bool run;\n    bool wait_for_ping_resp;\n    outbox_handle_t outbox;\n    EventGroupHandle_t status_bits;\n    SemaphoreHandle_t  api_lock;\n    TaskHandle_t       task_handle;\n};",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "middle",
      "baseline": 380,
      "containerId": "4hjyTjKQktnFlGbZUt9gj",
      "originalText": "struct esp_mqtt_client {\n    esp_transport_list_handle_t transport_list;\n    esp_transport_handle_t transport;\n    mqtt_config_storage_t *config;\n    mqtt_state_t  mqtt_state;\n    mqtt_connect_info_t connect_info;\n    mqtt_client_state_t state;\n    uint64_t refresh_connection_tick;\n    uint64_t keepalive_tick;\n    uint64_t reconnect_tick;\n    int wait_timeout_ms;\n    int auto_reconnect;\n    esp_mqtt_event_t event;\n    bool run;\n    bool wait_for_ping_resp;\n    outbox_handle_t outbox;\n    EventGroupHandle_t status_bits;\n    SemaphoreHandle_t  api_lock;\n    TaskHandle_t       task_handle;\n};",
      "lineHeight": 1.2
    },
    {
      "id": "xkKzxYQJS0yIRJ4Km-RV9",
      "type": "text",
      "x": -1004.3754127978325,
      "y": 307.89087045814256,
      "width": 665.625,
      "height": 19.2,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "seed": 117919328,
      "version": 366,
      "versionNonce": 69224352,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1721261983456,
      "link": null,
      "locked": false,
      "text": "defines esp_mqtt_client_handle_t as a pointer to esp_mqtt_client struct",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 15,
      "containerId": null,
      "originalText": "defines esp_mqtt_client_handle_t as a pointer to esp_mqtt_client struct",
      "lineHeight": 1.2
    },
    {
      "id": "jez-y5vG2_AVr740pDE3w",
      "type": "text",
      "x": 253.74866743431738,
      "y": -74.01969197116634,
      "width": 1115.625,
      "height": 19.2,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "seed": 2111001504,
      "version": 220,
      "versionNonce": 897464928,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1721263697419,
      "link": null,
      "locked": false,
      "text": "static void gps_event_handler(void *event_handler_arg, esp_event_base_t event_base, int32_t event_id, void *event_data)",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 15,
      "containerId": null,
      "originalText": "static void gps_event_handler(void *event_handler_arg, esp_event_base_t event_base, int32_t event_id, void *event_data)",
      "lineHeight": 1.2
    },
    {
      "id": "VP8Vil9AWgaWMPMv8LT7N",
      "type": "text",
      "x": 263.9061944002842,
      "y": -449.65474591770203,
      "width": 984.375,
      "height": 19.2,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "seed": 1847454304,
      "version": 182,
      "versionNonce": 1331388320,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1721262904707,
      "link": null,
      "locked": false,
      "text": "/* The last argument may be used to pass data to the event handler, in this example mqtt_event_handler */",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 15,
      "containerId": null,
      "originalText": "/* The last argument may be used to pass data to the event handler, in this example mqtt_event_handler */",
      "lineHeight": 1.2
    },
    {
      "id": "X-HXleQo-PCtWgqXLuS_d",
      "type": "text",
      "x": 264.7370324299352,
      "y": -430.6961321632813,
      "width": 778.125,
      "height": 19.2,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "seed": 2060741536,
      "version": 276,
      "versionNonce": 304228256,
      "isDeleted": false,
      "boundElements": [
        {
          "id": "8t1uY40nBdN86UJ3ZgPYy",
          "type": "arrow"
        },
        {
          "id": "UcmX-vDoQ22-t2QyzddDm",
          "type": "arrow"
        },
        {
          "id": "81fCtnstE75LST2Q8tjgm",
          "type": "arrow"
        }
      ],
      "updated": 1721263833835,
      "link": null,
      "locked": false,
      "text": "esp_mqtt_client_register_event(client, ESP_EVENT_ANY_ID, mqtt_event_handler, NULL);",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 15,
      "containerId": null,
      "originalText": "esp_mqtt_client_register_event(client, ESP_EVENT_ANY_ID, mqtt_event_handler, NULL);",
      "lineHeight": 1.2
    },
    {
      "id": "_FC9hTtXX4mRQwmP-TsXI",
      "type": "text",
      "x": 246.3240870927549,
      "y": 149.71278623251158,
      "width": 487.5,
      "height": 19.2,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "seed": 170244704,
      "version": 170,
      "versionNonce": 1877389920,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1721262734758,
      "link": null,
      "locked": false,
      "text": "/* register event handler for NMEA parser library */",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 15,
      "containerId": null,
      "originalText": "/* register event handler for NMEA parser library */",
      "lineHeight": 1.2
    },
    {
      "id": "nBSCniErQEbAt0rWA4Yl7",
      "type": "text",
      "x": 249.005914852954,
      "y": 181.59193820663296,
      "width": 571.875,
      "height": 19.2,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "seed": 1023582816,
      "version": 246,
      "versionNonce": 2032232032,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1721262734758,
      "link": null,
      "locked": false,
      "text": "nmea_parser_add_handler(nmea_hdl, gps_event_handler, client);",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 15,
      "containerId": null,
      "originalText": "nmea_parser_add_handler(nmea_hdl, gps_event_handler, client);",
      "lineHeight": 1.2
    },
    {
      "id": "5P53L5rnjt4T6-dJ8yBOM",
      "type": "text",
      "x": 169.90423663469966,
      "y": -270.62696224617036,
      "width": 1068.75,
      "height": 19.2,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "seed": 1045780064,
      "version": 235,
      "versionNonce": 557738912,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1721263092788,
      "link": null,
      "locked": false,
      "text": "static void mqtt_event_handler(void *event_handler_arg, esp_event_base_t base, int32_t event_id, void *event_data)",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 15,
      "containerId": null,
      "originalText": "static void mqtt_event_handler(void *event_handler_arg, esp_event_base_t base, int32_t event_id, void *event_data)",
      "lineHeight": 1.2
    },
    {
      "id": "Vn7ATEr_8BhYyeCmTpqzx",
      "type": "text",
      "x": 217.46425419841745,
      "y": -245.5728418550539,
      "width": 403.125,
      "height": 19.2,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "seed": 856648288,
      "version": 272,
      "versionNonce": 833615776,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1721263092788,
      "link": null,
      "locked": false,
      "text": "esp_mqtt_event_handle_t event = event_data;",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 15,
      "containerId": null,
      "originalText": "esp_mqtt_event_handle_t event = event_data;",
      "lineHeight": 1.2
    },
    {
      "id": "MBZ8xl7aiV5XHJMVUlqgz",
      "type": "text",
      "x": 216.59999764597666,
      "y": -222.06291044950697,
      "width": 450,
      "height": 19.2,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "seed": 1471867808,
      "version": 259,
      "versionNonce": 1410335648,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1721263092788,
      "link": null,
      "locked": false,
      "text": "esp_mqtt_client_handle_t client = event->client;",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 15,
      "containerId": null,
      "originalText": "esp_mqtt_client_handle_t client = event->client;",
      "lineHeight": 1.2
    },
    {
      "id": "hYZBpcZQXzv1wC2z2pjBn",
      "type": "text",
      "x": -47.69478884165946,
      "y": -357.6976896491781,
      "width": 1200,
      "height": 19.2,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "seed": 1938183072,
      "version": 581,
      "versionNonce": 2022158240,
      "isDeleted": false,
      "boundElements": [
        {
          "id": "81fCtnstE75LST2Q8tjgm",
          "type": "arrow"
        },
        {
          "id": "8t1uY40nBdN86UJ3ZgPYy",
          "type": "arrow"
        },
        {
          "id": "UcmX-vDoQ22-t2QyzddDm",
          "type": "arrow"
        },
        {
          "id": "FRjs6C7yuLhzLxjGKzdvr",
          "type": "arrow"
        }
      ],
      "updated": 1721263866221,
      "link": null,
      "locked": false,
      "text": "return esp_event_handler_register_with(client->config->event_loop_handle, MQTT_EVENTS, event, event_handler, event_handler_arg);",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 15,
      "containerId": null,
      "originalText": "return esp_event_handler_register_with(client->config->event_loop_handle, MQTT_EVENTS, event, event_handler, event_handler_arg);",
      "lineHeight": 1.2
    },
    {
      "id": "81fCtnstE75LST2Q8tjgm",
      "type": "arrow",
      "x": 861.1611850211821,
      "y": -407.0433139165816,
      "width": 22.269696071406997,
      "height": 47.952461084612935,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 2
      },
      "seed": 1060147808,
      "version": 509,
      "versionNonce": 289410976,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1721263856813,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          22.269696071406997,
          47.952461084612935
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "X-HXleQo-PCtWgqXLuS_d",
        "focus": -0.5103550508524208,
        "gap": 4.45281824669965
      },
      "endBinding": {
        "elementId": "hYZBpcZQXzv1wC2z2pjBn",
        "focus": 0.5562517643644241,
        "gap": 1.3931631827906301
      },
      "startArrowhead": null,
      "endArrowhead": "arrow"
    },
    {
      "id": "8t1uY40nBdN86UJ3ZgPYy",
      "type": "arrow",
      "x": 593.9614527549919,
      "y": -409.7585254248333,
      "width": 36.64422744537637,
      "height": 41.299452012315214,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 2
      },
      "seed": 1536134752,
      "version": 283,
      "versionNonce": 1064812128,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1721263850247,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          -36.64422744537637,
          41.299452012315214
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "X-HXleQo-PCtWgqXLuS_d",
        "focus": 0.12520344159641586,
        "gap": 1.7376067384479654
      },
      "endBinding": {
        "elementId": "hYZBpcZQXzv1wC2z2pjBn",
        "focus": -0.021452547130070245,
        "gap": 10.761383763340035
      },
      "startArrowhead": null,
      "endArrowhead": "arrow"
    },
    {
      "id": "UcmX-vDoQ22-t2QyzddDm",
      "type": "arrow",
      "x": 730.4490288308743,
      "y": -409.81416500492037,
      "width": 5.563888459236637,
      "height": 42.315743717343935,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 2
      },
      "seed": 1842776992,
      "version": 399,
      "versionNonce": 1930442336,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1721263855669,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          -5.563888459236637,
          42.315743717343935
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "X-HXleQo-PCtWgqXLuS_d",
        "focus": -0.20017409936837136,
        "gap": 1.6819671583608908
      },
      "endBinding": {
        "elementId": "hYZBpcZQXzv1wC2z2pjBn",
        "focus": 0.28278678863219997,
        "gap": 9.80073163839839
      },
      "startArrowhead": null,
      "endArrowhead": "arrow"
    },
    {
      "id": "FRjs6C7yuLhzLxjGKzdvr",
      "type": "arrow",
      "x": 1014.2924688094814,
      "y": -412.911429167314,
      "width": 5.819830527637464,
      "height": 47.898288823278676,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 2
      },
      "seed": 532049824,
      "version": 323,
      "versionNonce": 349718432,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1721263866592,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          5.819830527637464,
          47.898288823278676
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": null,
      "endBinding": {
        "elementId": "hYZBpcZQXzv1wC2z2pjBn",
        "focus": 0.7815845204700195,
        "gap": 7.315450694857276
      },
      "startArrowhead": null,
      "endArrowhead": "arrow"
    },
    {
      "id": "T8QEWhQlLqwvEx4lvq0B9",
      "type": "text",
      "x": 1201.0101363479873,
      "y": -407.18721132778666,
      "width": 403.125,
      "height": 19.2,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "seed": 1945397856,
      "version": 56,
      "versionNonce": 1644658592,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1721263910326,
      "link": null,
      "locked": false,
      "text": "Register in esp_event_loop the mqtt_handler",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 15,
      "containerId": null,
      "originalText": "Register in esp_event_loop the mqtt_handler",
      "lineHeight": 1.2
    },
    {
      "id": "Ggfwj5CmNLI52bNKjZg0r",
      "type": "text",
      "x": 318.35712179568554,
      "y": -538.0559196315629,
      "width": 93.75,
      "height": 38.4,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "seed": 452636576,
      "version": 3,
      "versionNonce": 190478240,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1721264726901,
      "link": null,
      "locked": false,
      "text": "0x3fca3724\n0x3fca3870",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 35,
      "containerId": null,
      "originalText": "0x3fca3724\n0x3fca3870",
      "lineHeight": 1.2
    }
  ],
  "appState": {
    "gridSize": null,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}